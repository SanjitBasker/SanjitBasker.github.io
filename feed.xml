<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://sanjitbasker.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sanjitbasker.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-05-11T14:25:02+00:00</updated><id>https://sanjitbasker.github.io/feed.xml</id><title type="html">Sanjit Basker</title><subtitle>My personal portfolio website (draft iteration, for now).
</subtitle><entry><title type="html">PrairieLearn Online Modules</title><link href="https://sanjitbasker.github.io/blog/2023/prairie-learn/" rel="alternate" type="text/html" title="PrairieLearn Online Modules" /><published>2023-01-01T08:00:00+00:00</published><updated>2023-01-01T08:00:00+00:00</updated><id>https://sanjitbasker.github.io/blog/2023/prairie-learn</id><content type="html" xml:base="https://sanjitbasker.github.io/blog/2023/prairie-learn/"><![CDATA[<h2 id="highlights">Highlights</h2>
<ul>
  <li>I designed new online exercises with MAE 2020 instructors for free-body diagrams üèóÔ∏è</li>
  <li>I implemented the frontend and backend of a new feature using FabricJS and Python <a href="https://github.com/PrairieLearn/PrairieLearn/pull/4466"><i class="fa-solid fa-arrow-up-right-from-square"></i></a></li>
  <li>I co-authored a <a href="https://peer.asee.org/improving-understanding-of-reaction-forces-in-free-body-diagrams-using-a-paired-vector-object-in-prairie-learn">paper</a> on improvement in student outcomes and got a shiny plaque ü§©</li>
</ul>

<p><br />
<br /></p>

<h2 id="background-on-prairielearn">Background on PrairieLearn</h2>

<p>PrairieLearn is an online learning management system used by various universities in the US. PrairieLearn supports problems with a drawing canvas, which we use to build students‚Äô skills in drawing free-body diagrams (FBDs).</p>

<p><img src="/assets/img/pl-images/problem-1-dark.png" alt="old PL problem" width="500" class="center" /></p>

<div class="caption">Here is a sample problem statement from the PrairieLearn system. The question asks students to complete a free-body diagram by drawing arrows on a canvas.</div>

<p>One particularly challenging application of FBDs for new learners in a statics course is for ‚Äúframes‚Äù consisting of multiple members, pinned together and loaded with forces. When analyzing a frame, students are taught to first draw an overall FBD and then an ‚Äúexploded‚Äù FBD, which contains separate entities for each component of the frame and also shows the internal forces between components.</p>

<p><img src="/assets/img/pl-images/beer.png" alt="textbook excerpt" width="500" class="center" /></p>

<div class="caption">Here is a free-body diagram with both external forces (T, W, A<sub>x</sub>, A<sub>y</sub>) and internal forces (C<sub>x</sub>, C<sub>y</sub>, F<sub>BE</sub>). The internal forces appear where members are pinned together, and consist of forces with the same magnitude and opposite direction.<br />Taken from <i>Statics and Mechanics of Materials</i> by Beer.</div>

<p>A major point of confusion for students in the course is how to treat reactions on members separated from each other at pins, including (1) identifying two-force members and (2) identifying pairs of forces that form equal and opposite reactions. PrairieLearn supports grading individual forces based on their placement and orientation, but there was no mechanism to grade ‚Äúexploded‚Äù FBDs for frames according to (1) and (2), which significantly limited the set of problems the platform could support and, in turn, the utility of the platform for our students.</p>

<p><br /></p>

<h2 id="investigating-client-needs">Investigating Client Needs</h2>

<p>I met with the professors of our course as well as the programmers who developed the initial canvas/drawing feature in PrairieLearn to come up with a plan for implementation. We first discussed whether the current grading logic could be extended to identify and grade pairs of opposite forces in our problems specific for frames. While this would be relatively straightforward to implement, this wouldn‚Äôt be the best fit for our students because we wanted them to conceptualize the equal-and-opposite internal forces (which appear in pairs whenever two elements are separated) differently from the external forces on a frame (which are simply copied over from the overall FBD to the ‚Äúexploded‚Äù FBD).</p>

<p><img src="/assets/img/pl-images/sketch.png" alt="drawing" width="500" class="center" /></p>

<div class="caption">Here's a sketch I developed for our initial meeting. The coloring indicates that the vectors appear in pairs, and the dotted lines show the students that the forces are paired to each other.</div>

<p>We decided on a drawing element that would allow students to insert two arrows at once onto the free-body diagram, which indicated to the backend that they had to be linked for grading. To be correct, the two arrows had to have opposite orientation (e.g. if one of them points left, the other has to point right). Since this was one of the concepts that students were learning, we didn‚Äôt enforce this in the user interface: students would still be able to draw incorrect FBDs with improperly aligned forces and get feedback that the arrows need to be aligned.</p>

<p><br /></p>

<h2 id="final-product-and-documentation">Final Product and Documentation</h2>

<p>I implemented the frontend using the FabricJS canvas library, which PrairieLearn already extends for its drawing elements. I added a new class to extend <code class="language-plaintext highlighter-rouge">PLDrawingBaseElement</code> which cycles through colors for the student: this way, if there are multiple forces on an ‚Äúexploded‚Äù free-body diagram, the student knows which forces are paired with each other. Unpaired forces remain red to be consistent with normal FBDs.</p>

<p><img src="/assets/img/pl-images/soln-dark.png" alt="drawing" width="500" class="center" /></p>

<div class="caption">Here's the final product. The forces in this diagram correspond to the forces in parts (b)-(c) of the first figure, with pairs indicated by forces of the same color.</div>

<p>After implementing the grading logic in Python, I wrote an entry in the <a href="https://prairielearn.readthedocs.io/en/latest/pl-drawing/#pl-paired-vector-element">documentation</a> and waited for my <a href="https://github.com/PrairieLearn/PrairieLearn/pull/4466">pull request</a> to be reviewed and merged. After the CI/CD process was complete, we were all set to start using the element in our course.</p>

<p>In order to determine the effectiveness of the new paired-vector element, we conducted an A/B test in which half of our students were given a homework assignment involving the new element, and half of the students were given simpler questions that could be supported using PrairieLearn‚Äôs old features. We found that students who practiced with the new paired vectors better learned to draw exploded FBDs. I co-authored a <a href="https://peer.asee.org/improving-understanding-of-reaction-forces-in-free-body-diagrams-using-a-paired-vector-object-in-prairie-learn">paper</a> on the motivation and results of this project, and we won the Best Paper Award.</p>

<p><br /></p>

<h2 id="lessons-learned">Lessons Learned</h2>

<p>This project taught me the importance of documentation. Not only did I read the user-facing documentation when familiarizing myself with the PrairieLearn system, I also read the developer documentation to make sure I was following all the right steps to add my feature. Finally, I contributed documentation for the feature that I added, with a helpful example so that other instructors could benefit from my work.</p>

<p>While I had used version control before for personal projects, this was my first time seeing a CI/CD pipeline. I also had to fight with some linting/code quality checkers before my pull request was ready to merge.
<br />
All of these tools are standard in industry, but this project was my first exposure to them üôÇ</p>

<!-- For this assignment, I‚Äôm asking you to reflect on what you‚Äôve done and explain the choices you‚Äôve made in terms of some of the language we have learned‚Äîfrom keywords in lectures, examples we‚Äôve gone over, or points made in writer/designer. Your goal, in other words, is to justify Given that, what aspects of your site did you choose to make that way, and how do they showcase your professionalism as a computer scientist or an aerospace engineer? -->

<!-- https://vb-cs.github.io/Professional-Portfolio/index.html#hero -->]]></content><author><name></name></author><summary type="html"><![CDATA[implementing and testing the paired-vector element]]></summary></entry><entry><title type="html">OCTET</title><link href="https://sanjitbasker.github.io/blog/2022/octet/" rel="alternate" type="text/html" title="OCTET" /><published>2022-01-01T08:00:00+00:00</published><updated>2022-01-01T08:00:00+00:00</updated><id>https://sanjitbasker.github.io/blog/2022/octet</id><content type="html" xml:base="https://sanjitbasker.github.io/blog/2022/octet/"><![CDATA[<h2 id="highlights">Highlights</h2>
<ul>
  <li>I learned a functional programming language, OCaml üê™</li>
  <li>I worked in a group of 3 to create Octet, an Emacs-like text editor ‚öõÔ∏è</li>
  <li>I designed the interface for and implemented a text buffer üìÅ</li>
</ul>

<p><br />
<br /></p>

<h2 id="basics-of-ocaml">Basics of OCaml</h2>

<p>Unlike most programming languages, OCaml is functional: this means that rather than changing the state of variables (or even ‚Äúobjects‚Äù) throughout a program, each name (like a variable <code class="language-plaintext highlighter-rouge">x</code>) is only assigned to once. The main abstraction provided by functional languages is that of first-class functions: ‚Äúfirst-class‚Äù here means that these functions can be stored into variables just like integers and booleans.</p>

<p>Here‚Äôs a simple program written in OCaml that implements insertion sort.</p>
<div class="language-ocaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">(* taken from CS 3110, spring 2022 *)</span>
<span class="k">let</span> <span class="k">rec</span> <span class="n">isort</span> <span class="o">=</span>
  <span class="c">(* insert [x] into its correct position in [lst] and return the result *)</span>
  <span class="k">let</span> <span class="k">rec</span> <span class="n">insert</span> <span class="n">x</span> <span class="n">lst</span> <span class="o">=</span>
    <span class="k">match</span> <span class="n">lst</span> <span class="k">with</span>
    <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span> <span class="p">[</span> <span class="n">x</span> <span class="p">]</span>
    <span class="o">|</span> <span class="n">h</span> <span class="o">::</span> <span class="n">t</span> <span class="o">-&gt;</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="n">h</span> <span class="k">then</span> <span class="n">x</span> <span class="o">::</span> <span class="n">h</span> <span class="o">::</span> <span class="n">t</span> <span class="k">else</span> <span class="n">h</span> <span class="o">::</span> <span class="n">insert</span> <span class="n">x</span> <span class="n">t</span>
  <span class="k">in</span>
  <span class="c">(* to sort a list, sort all but the first element and then insert the first element 
     where it belongs
     more concisely, "insert head into sorted tail" *)</span>
  <span class="k">function</span>
  <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span> <span class="bp">[]</span>
  <span class="o">|</span> <span class="n">h</span> <span class="o">::</span> <span class="n">t</span> <span class="o">-&gt;</span> <span class="n">insert</span> <span class="n">h</span> <span class="p">(</span><span class="n">isort</span> <span class="n">t</span><span class="p">)</span>
</code></pre></div></div>

<p>The above program is fairly easy to understand and reason about (once one gains familiarity with the syntax), but the runtime is quite slow for large lists: this is because in the worst case, the inner function <code class="language-plaintext highlighter-rouge">insert</code> takes stack space proportional to the size of its input, and so does <code class="language-plaintext highlighter-rouge">isort</code> itself. In an average-case input, the minimum element will be about halfway down the list. Regardless, the number of call-frame initializations performed in this implementation is \(O(n^2)\), which is an expensive price to pay for ‚Äúreadable‚Äù code.</p>

<p>A compiler could rewrite this function in <a href="https://en.wikipedia.org/wiki/Continuation-passing_style">continuation-passing style</a> (which uses constant stack space), by adding an extra argument <code class="language-plaintext highlighter-rouge">cont</code>, which is a function representing the remainder of the computation:</p>

<div class="language-ocaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">isort_cp</span> <span class="n">lst</span> <span class="o">=</span>
  <span class="k">let</span> <span class="n">insert_cp</span> <span class="n">lst</span> <span class="n">x</span> <span class="o">=</span>
    <span class="k">let</span> <span class="k">rec</span> <span class="n">aux</span> <span class="n">cont</span> <span class="n">x</span> <span class="n">lst</span> <span class="o">=</span>
      <span class="k">match</span> <span class="n">lst</span> <span class="k">with</span>
      <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span> <span class="n">cont</span> <span class="p">[</span> <span class="n">x</span> <span class="p">]</span>
      <span class="o">|</span> <span class="n">h</span> <span class="o">::</span> <span class="n">t</span> <span class="o">-&gt;</span>
          <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="n">h</span> <span class="k">then</span> <span class="n">cont</span> <span class="p">(</span><span class="n">x</span> <span class="o">::</span> <span class="n">lst</span><span class="p">)</span>
          <span class="k">else</span> <span class="n">aux</span> <span class="p">(</span><span class="k">fun</span> <span class="n">l</span> <span class="o">-&gt;</span> <span class="n">cont</span> <span class="p">(</span><span class="n">h</span> <span class="o">::</span> <span class="n">l</span><span class="p">))</span> <span class="n">x</span> <span class="n">t</span>
    <span class="k">in</span>
    <span class="n">aux</span> <span class="p">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="p">)</span> <span class="n">x</span> <span class="n">lst</span>
  <span class="k">in</span>
  <span class="k">let</span> <span class="k">rec</span> <span class="n">aux</span> <span class="n">cont</span> <span class="n">lst</span> <span class="o">=</span>
    <span class="k">match</span> <span class="n">lst</span> <span class="k">with</span>
    <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span> <span class="n">cont</span> <span class="bp">[]</span>
    <span class="o">|</span> <span class="n">h</span> <span class="o">::</span> <span class="n">t</span> <span class="o">-&gt;</span> <span class="n">aux</span> <span class="p">(</span><span class="k">fun</span> <span class="n">l</span> <span class="o">-&gt;</span> <span class="n">cont</span> <span class="p">(</span><span class="n">insert_cp</span> <span class="n">l</span> <span class="n">h</span><span class="p">))</span> <span class="n">t</span>
  <span class="k">in</span>
  <span class="n">aux</span> <span class="p">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="p">)</span> <span class="n">lst</span>
</code></pre></div></div>

<p>As it turns out, storing an entire function is not necessary in this case and we can get by with <code class="language-plaintext highlighter-rouge">pred</code>, which is just the portion of the list we‚Äôve traversed. And instead of ‚Äúinserting head into sorted tail,‚Äù we can just insert the elements from the original list one by one, into an accumulator initialized as the empty list <code class="language-plaintext highlighter-rouge">[]</code>.</p>

<div class="language-ocaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">(* written by me *)</span>
<span class="k">let</span> <span class="n">isort_tr</span> <span class="n">lst</span> <span class="o">=</span>
  <span class="k">let</span> <span class="n">insert_tr</span> <span class="n">lst</span> <span class="n">x</span> <span class="o">=</span>
    <span class="k">let</span> <span class="k">rec</span> <span class="n">aux</span> <span class="n">pred</span> <span class="n">x</span> <span class="o">=</span> <span class="k">function</span>
      <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">rev_append</span> <span class="n">pred</span> <span class="p">[</span> <span class="n">x</span> <span class="p">]</span>
      <span class="o">|</span> <span class="n">h</span> <span class="o">::</span> <span class="n">t</span> <span class="o">-&gt;</span>
          <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="n">h</span> <span class="k">then</span> <span class="nn">List</span><span class="p">.</span><span class="n">rev_append</span> <span class="p">(</span><span class="n">x</span> <span class="o">::</span> <span class="n">pred</span><span class="p">)</span> <span class="p">(</span><span class="n">h</span> <span class="o">::</span> <span class="n">t</span><span class="p">)</span>
          <span class="k">else</span> <span class="n">aux</span> <span class="p">(</span><span class="n">h</span> <span class="o">::</span> <span class="n">pred</span><span class="p">)</span> <span class="n">x</span> <span class="n">t</span>
    <span class="k">in</span>
    <span class="n">aux</span> <span class="bp">[]</span> <span class="n">x</span> <span class="n">lst</span>
  <span class="k">in</span>
  <span class="nn">List</span><span class="p">.</span><span class="n">fold_left</span> <span class="n">insert_tr</span> <span class="bp">[]</span> <span class="n">lst</span>
</code></pre></div></div>

<p>The library functions <a href="https://v2.ocaml.org/api/List.html#VALfold_left"><code class="language-plaintext highlighter-rouge">List.fold_left</code></a> and <a href="https://v2.ocaml.org/api/List.html#VALrev_append"><code class="language-plaintext highlighter-rouge">List.rev_append</code></a> are themselves tail-recursive, meaning that this entire function uses constant stack space!</p>

<p>The optimization is important if the lists we‚Äôre working with are long. The <a href="https://v2.ocaml.org/api/List.html"><code class="language-plaintext highlighter-rouge">List</code></a> documentation says it makes a difference when the length is around 10000. Indeed, on my machine <code class="language-plaintext highlighter-rouge">isort</code> has a noticeable delay for a reverse-sorted input of size 5000 while <code class="language-plaintext highlighter-rouge">isort_tr</code> is fast even for 20000 elements.</p>

<p><br /></p>

<h2 id="project-proposal-and-philosophy">Project Proposal and Philosophy</h2>

<p>As a final project for this class, my group decided to implement a text editor with keybindings similar to Emacs. We decided to interface with <a href="https://github.com/pqwy/notty"><code class="language-plaintext highlighter-rouge">Notty</code></a>, a package for displaying text to the terminal. We also researched options for autoformatting and syntax-highlighting code and decided to use <a href="https://github.com/ocaml/ocaml-lsp"><code class="language-plaintext highlighter-rouge">ocaml-lsp</code></a>.</p>

<p>In this project, we prioritized building end-to-end. We decided (somewhat ambitiously) that our first milestone would be a bare-bones text editor with all our dependencies set up, and that for the second and third sprint we‚Äôd work on the backend and frontend in parallel while maintaining the interface from the prototype. This structure is described in <em>Pragmatic Programmer</em> as a ‚Äútracer bullet.‚Äù</p>

<p><br /></p>

<h2 id="project-management-and-accountability">Project Management and Accountability</h2>

<p>Since I was working in a group of 3, it was important for us to keep each other accountable. We reported to each other weekly and had three progress update meetings with our ‚Äúproject manager,‚Äù a CS 3110 TA.</p>

<p><img src="/assets/img/octet-images/scope2.png" alt="drawing" width="500" class="center" /></p>

<div class="caption">Here's a screenshot from our second progress report. We delivered on most of what was planned and delayed searching file contents to our third sprint.</div>

<p><br /></p>

<h2 id="buffer-implementation">Buffer Implementation</h2>

<p>My task was to implement the buffer which allowed for modifications to the text. The buffer implementation is nontrivial because inserting or removing a character from a string is not an \(O(1)\) operation. However, based on the expected usage (for example, writing a long paragraph the same point in the text editor vs. lightly editing words throughout a file) the performance of an ‚Äúoptimal‚Äù buffer implementation can vary.</p>

<p>Our first buffer was just a list of strings, which had very poor asymptotic performance but was fine for small text files. We used this in our first milestone and made it a priority to rewrite as part of the second sprint.</p>

<p>The key insight we had in improving the buffer is that the user must first <em>move</em> the cursor to the location where the text is being inserted. While our prior implementations simply stored the cursor location as a pair of integers and updated that field. In our later implementations, we actually updated the backend‚Äôs representation of the current line every time the cursor was moved. Technically, this worsened our latency, but it majorly improved our throughput on workloads consisting of lightly editing various parts of a line.</p>

<p>The one aspect of our runtime which we were not able to effectively amortize was memory allocation: when the buffer ran out of space, we had to allocate a larger one and copy over characters. Because our text editor is single-threaded, this latency cannot be masked to the user and the inputs may lag. However, by setting a large resize factor, we ensure that this situation occurs very rarely, and only when the buffer is growing for the first time.</p>

<p>In testing my buffer, I kept around the old implementations and tested extensively with OUnit. I wrote glass-box and random tests and compared the behavior of each implementation to ensure that it matched the implementation backed by a list of strings (which was straightforward enough that we could treat it like a specification).</p>

<p><img src="/assets/img/octet-images/screenshot.png" alt="drawing" width="500" class="center" /></p>

<div class="caption">Here's our text editor in action. Syntax highlighting is enabled for OCaml, and some text is highlighted and copied to the clipboard.</div>

<p><br /></p>

<h2 id="lessons-learned">Lessons Learned</h2>

<p>While our goal in building an end-to-end prototype in the first sprint was ambitious, I think that it was effective because it forced us to (1) plan out the interfaces we‚Äôd use and (2) gave us space to work on things in parallel in the following sprints.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[creating a text editor in OCaml]]></summary></entry></feed>